AWSTemplateFormatVersion: 2010-09-09
Description: KT template for ECS cluster

Parameters:

  VpcStackName:
    Type: String
    Description: Name of VPC stack to build off of
    Default: kt-vpc
    
  ApiDomainName:
    Type: String
    Description: The full API domain name e.g. api.king-transports.com
    AllowedPattern: (?!-)[a-zA-Z0-9-.]{1,63}(?<!-)
    ConstraintDescription: must be a valid DNS zone name.
    Default: api.king-transports.com
    
Resources:

  EcsSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
        GroupName: "kt-ecs-sg"
        GroupDescription: Allow http to client host
        VpcId:
          Fn::ImportValue: !Sub ${VpcStackName}-vpc-id
        SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
        SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
          CidrIp: 0.0.0.0/0

  EcsRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: kt-ecs-role
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
              - ec2.amazonaws.com
              - ecs.amazonaws.com
              - ecs-tasks.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
        - arn:aws:iam::aws:policy/AmazonECS_FullAccess
        - arn:aws:iam::aws:policy/CloudWatchFullAccessV2
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryFullAccess
        - arn:aws:iam::aws:policy/AmazonSQSFullAccess


  Alb:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      IpAddressType: ipv4
      Name: 'kt-alb'
      Scheme: internet-facing
      SecurityGroups:
        - !Ref EcsSecurityGroup
      Subnets:
        - Fn::ImportValue: !Sub ${VpcStackName}-public-subnet-a-id
        - Fn::ImportValue: !Sub ${VpcStackName}-public-subnet-b-id
      Type: application

  Route53RecordSet:
    Type: "AWS::Route53::RecordSet"
    Properties:
      Name: !Ref 'ApiDomainName'
      Type: "A"
      AliasTarget:
        HostedZoneId: !GetAtt Alb.CanonicalHostedZoneID
        DNSName: !GetAtt Alb.DNSName
        EvaluateTargetHealth: true
      HostedZoneId: {'Fn::ImportValue': !Sub '${VpcStackName}-hosted-zone-id'}

  SSLCertificate:
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: !Ref 'ApiDomainName'
      ValidationMethod: DNS
      DomainValidationOptions:
        - DomainName: !Ref 'ApiDomainName'
          HostedZoneId: {'Fn::ImportValue': !Sub '${VpcStackName}-hosted-zone-id'}

  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      Certificates: 
        - CertificateArn: !Ref SSLCertificate
      DefaultActions:
        - Type: fixed-response
          FixedResponseConfig:        
            ContentType: text/plain
            MessageBody: "Not Found"
            StatusCode: 404
      Port: 443
      Protocol: HTTPS
      LoadBalancerArn: !Ref Alb
       
  EcsCluster:
    Type: AWS::ECS::Cluster
    Properties:
        ClusterName: "kt-ecs-cluster"
    
Outputs:

  EcsClusterExport:
    Description: A reference to the created ECS Cluster
    Value: !Ref EcsCluster
    Export:
      Name: !Sub ${AWS::StackName}-ecs-cluster

  EcsSecurityGroupExport:
    Description: A reference to the created SG
    Value: !Ref EcsSecurityGroup
    Export:
      Name: !Sub ${AWS::StackName}-default-security-group

  EcsRoleExport:
    Description: A reference to the created IAM Role
    Value: !Ref EcsRole
    Export:
      Name: !Sub ${AWS::StackName}-default-role

  AlbArnExport:
    Description: A reference to the created ALB
    Value: !Ref Alb
    Export:
      Name: !Sub ${AWS::StackName}-alb-arn
      
  AlbDnsExport:
    Description: A reference to the created ALB
    Value: 
      Fn::GetAtt: Alb.DNSName
    Export:
      Name: !Sub ${AWS::StackName}-alb-dns

  ElbListenerArnExport:
    Description: A reference to the created listener
    Value: !Ref Listener
    Export:
      Name: !Sub ${AWS::StackName}-elb-listener-arn