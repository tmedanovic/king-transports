AWSTemplateFormatVersion: 2010-09-09
Description: KT template for ECS service

Parameters:

  VpcStack:
    Type: String
    Description: Name of VPC stack to build off of
    Default: kt-vpc

  EcsClusterStack:
    Type: String
    Description: Name of ECS Cluster stack to build off of
    Default: kt-ecs-cluster
    
  MicroserviceName:
    Type: String
    Description: Name of KT microservice
    Default: ticketing

  MicroservicePath:
    Type: String
    Description: KT microservice path
    Default: /ticketing*
    
  AlbListnerRulePriority:
    Type: Number
    Description: Listener rule priority
    Default: 1
    
  ApiDomainName:
    Type: String
    Description: The full API domain name e.g. api.king-transports.com
    AllowedPattern: (?!-)[a-zA-Z0-9-.]{1,63}(?<!-)
    ConstraintDescription: must be a valid DNS zone name.
    Default: api.king-transports.com
    
Resources:
            
  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub kt-${MicroserviceName}-elb-tg
      HealthCheckEnabled: true
      HealthCheckPort: 80
      HealthCheckProtocol: HTTP
      HealthCheckPath: "/health"
      Port: 80
      Protocol: HTTP
      TargetType: ip
      VpcId:
        Fn::ImportValue: !Sub ${VpcStack}-vpc-id
        
  ListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup
      Conditions:
        - Field: path-pattern
          PathPatternConfig:
            Values:
              - !Sub ${MicroservicePath}
      ListenerArn:
        Fn::ImportValue: !Sub ${EcsClusterStack}-elb-listener-arn
      Priority: !Ref AlbListnerRulePriority

  FargateService:
    Type: AWS::ECS::Service
    DependsOn: ListenerRule
    Properties:
      Name: !Sub kt-${MicroserviceName}-ecs-service
      ServiceName: !Sub kt-${MicroserviceName}-ecs-service
      Cluster:
        Fn::ImportValue: !Sub ${EcsClusterStack}-ecs-cluster
      DeploymentController:
        Type: ECS
      DesiredCount: 1
      HealthCheckGracePeriodSeconds: 60
      LaunchType: FARGATE
      LoadBalancers:
        -
          ContainerName: !Sub kt-${MicroserviceName}-ecs-task
          ContainerPort: 80
          TargetGroupArn: !Ref TargetGroup
      NetworkConfiguration:
          AwsvpcConfiguration:
            SecurityGroups:
              - Fn::ImportValue: !Sub ${EcsClusterStack}-default-security-group
            Subnets:
              - Fn::ImportValue: !Sub ${VpcStack}-private-subnet-a-id
              - Fn::ImportValue: !Sub ${VpcStack}-private-subnet-b-id
      TaskDefinition: !Ref FargateServiceTaskDefinition

  FargateServiceLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 7

  FargateServiceTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub kt-${MicroserviceName}-ecs-task
      ContainerDefinitions:
        -
          Name: !Sub kt-${MicroserviceName}-ecs-task
          Essential: true
          Image: !Sub "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/king-transports/${MicroserviceName}:Latest"
          HealthCheck:
            Command: [ "CMD-SHELL", "curl -f http://localhost/health || exit 1" ]
          LogConfiguration:
              LogDriver: awslogs
              Options:
                awslogs-group: !Ref FargateServiceLogGroup
                awslogs-stream-prefix: kt
                awslogs-region: !Ref AWS::Region
          PortMappings:
            -   Name: !Sub kt-${MicroserviceName}-service-port
                ContainerPort: 80
                HostPort: 80
                Protocol: "tcp"
          Environment: 
            - 
              Name: "PGSQL_SERVER"
              Value: {'Fn::ImportValue': !Sub '${EcsClusterStack}-pg-rds-address'}
            - 
              Name: "PGSQL_PORT"
              Value: {'Fn::ImportValue': !Sub '${EcsClusterStack}-pg-rds-port'}
            - 
              Name: "PGSQL_USER"
              Value: !Join ['', ['{{resolve:secretsmanager:', {'Fn::ImportValue': !Sub '${EcsClusterStack}-pg-rds-secret-name'}, ':SecretString:username}}' ]]
            - 
              Name: "PGSQL_PASSWORD"
              Value: !Join ['', ['{{resolve:secretsmanager:', {'Fn::ImportValue': !Sub '${EcsClusterStack}-pg-rds-secret-name'}, ':SecretString:password}}' ]]
            - 
              Name: "ALB_DOMAIN"
              Value: {'Fn::ImportValue': !Sub '${EcsClusterStack}-alb-dns'}
            - 
              Name: "API_DOMAIN"
              Value: !Ref ApiDomainName
              
      Cpu: '256'
      ExecutionRoleArn:
        Fn::ImportValue: !Sub ${EcsClusterStack}-default-role
      Memory: '512'
      NetworkMode: awsvpc
      RequiresCompatibilities:
        -  FARGATE
      TaskRoleArn:
        Fn::ImportValue: !Sub ${EcsClusterStack}-default-role

Outputs:

  FargateServiceName:
    Description: A reference to the created Fargate Service
    Value: !GetAtt FargateService.Name
    Export:
      Name: !Sub ${AWS::StackName}-fargate-service-name